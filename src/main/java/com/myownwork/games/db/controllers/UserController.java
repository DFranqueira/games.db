package com.myownwork.games.db.controllers;

import java.util.Date;


import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.myownwork.games.db.models.User;
import com.myownwork.games.db.resources.UserRepository;

import org.springframework.http.MediaType;


@Controller // This means that this class is a Controller
@RequestMapping(path="/userController") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  
  @GetMapping(path="/allUsers")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  @PostMapping(path="/addUser", consumes = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
  public @ResponseBody String addNewUser(@RequestBody User user) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

	if(user.getId() == null) {
		User savedUser = userRepository.save(user);
		return "User saved. ID = "+savedUser.getId();
	} else if(!userRepository.existsById(user.getId())) {
		User savedUser = userRepository.save(user);
		return "User saved. ID = "+savedUser.getId();
	}else {
		return "Could NOT save user. ID = "+user.getId();
	}
	
  }
  
  
  @PutMapping(path="/updateUser", consumes = MediaType.APPLICATION_JSON_VALUE) // Map ONLY PUT Requests
  public @ResponseBody String updateUser(@RequestBody User user) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

	  //Date Handling
	 Date now = new Date(); 
	 Integer userId = user.getId();
	 user.setUpdateDate(now);
	 Boolean userExists = userRepository.existsById(userId);
	 
	 if(userExists) {
		 userRepository.save(user);
		 return "Updated user ID \"" + userId + "\" successfully!";
	 } else {
		 System.out.println("NÃ£o existe user com id enviado!");
		 return "User ID \"" + userId + "\" doest not exist!";
	 }
  }
  
  @DeleteMapping(path="/deleteUser") // Map ONLY DELETE Requests
  public @ResponseBody String deleteUser(@RequestParam Integer userId) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

	 //Integer userId = user.getId();
	 if(userRepository.existsById(userId)) {
		 userRepository.deleteById(userId);
		 return "Deleted user with ID \"" + userId + "\" successfully!";
	 } else {
		 return "User ID \"" + userId + "\" doest not exist!";
	 }
  }
 
}